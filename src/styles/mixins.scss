// Flexbox
@mixin flexbox() {
    display: -webkit-box;
    display: -moz-box;
    display: -ms-flexbox;
    display: -webkit-flex;
    display: flex;
}

// Flex
@mixin flex($values) {
    -webkit-box-flex: $values;
    -moz-box-flex:  $values;
    -webkit-flex:  $values;
    -ms-flex:  $values;
    flex:  $values;
}

// Order
@mixin order($val) {
    -webkit-box-ordinal-group: $val;
    -moz-box-ordinal-group: $val;
    -ms-flex-order: $val;
    -webkit-order: $val;
    order: $val;
}

// Box Sizing
@mixin box-sizing($model) {
    -webkit-box-sizing: $model;
    -moz-box-sizing: $model;
    box-sizing: $model;
}

// Border radius
@mixin border-radius($radius...) {
    -webkit-border-radius: $radius;
    -moz-border-radius: $radius;
    border-radius: $radius;
}

// Box Shadow
@mixin box-shadow($shadows...) {
    -webkit-box-shadow: $shadows;
    -moz-box-shadow: $shadows;
    box-shadow: $shadows;
}

// Linear Gradient
@mixin linear-gradient($direction : to bottom, $from-color : #FFF, $to-color : #F0F0F0) {
    background-color: $to-color;
    background-image: -webkit-linear-gradient($direction, $from-color, $to-color);
    background-image:    -moz-linear-gradient($direction, $from-color, $to-color);
    background-image:     -ms-linear-gradient($direction, $from-color, $to-color);
    background-image:      -o-linear-gradient($direction, $from-color, $to-color);
    background-image:         linear-gradient($direction, $from-color, $to-color);
}

// Transform
@mixin transform($transform...) {
    -webkit-transform: $transform;
    -moz-transform: $transform;
    -ms-transform: $transform;
    -o-transform: $transform;
    transform: $transform;
}

// Transition
@mixin transition($transition) {
    -webkit-transition: $transition;
    -moz-transition: $transition;
    -o-transition: $transition;
    transition: $transition;
}

// Filter
@mixin filter($filter-type,$filter-amount) {
    -webkit-filter: $filter-type+unquote('(#{$filter-amount})');
    -moz-filter: $filter-type+unquote('(#{$filter-amount})');
    -ms-filter: $filter-type+unquote('(#{$filter-amount})');
    -o-filter: $filter-type+unquote('(#{$filter-amount})');
    filter: $filter-type+unquote('(#{$filter-amount})');
}

// Keyframes
@mixin keyframes($animation-name) {
    @-webkit-keyframes $animation-name {
        @content;
    }
    @-moz-keyframes $animation-name {
        @content;
    }
    @-ms-keyframes $animation-name {
        @content;
    }
    @keyframes $animation-name {
        @content;
    }
}

// Media
// / Predefined Break-points
$mediaMaxWidth: 1260px;
$mediaBp1Width: 960px;
$mediaMinWidth: 480px;

@function translate-media-condition($c) {
    $condMap: (
    "screen": "only screen",
    "print": "only print",
    "retina": "(-webkit-min-device-pixel-ratio: 1.5), (min--moz-device-pixel-ratio: 1.5), (-o-min-device-pixel-ratio: 3/2), (min-device-pixel-ratio: 1.5), (min-resolution: 120dpi)",
    ">maxWidth": "(min-width: #{$mediaMaxWidth + 1})",
    "<maxWidth": "(max-width: #{$mediaMaxWidth})",
    ">bp1Width": "(min-width: #{$mediaBp1Width + 1})",
    "<bp1Width": "(max-width: #{$mediaBp1Width})",
    ">minWidth": "(min-width: #{$mediaMinWidth + 1})",
    "<minWidth": "(max-width: #{$mediaMinWidth})"
    );
    @return map-get( $condMap, $c );
}

// The mdia mixin
@mixin media($args...) {
    $query: "";
    @each $arg in $args {
        $op: "";
        @if ( $query != "" ) {
            $op: " and ";
        }
        $query: $query + $op + translate-media-condition($arg);
    }
    @media #{$query}  { @content; }
}
